/**
 * Document Browser - Client-side JavaScript functionality
 * 
 * This file handles all the client-side interactivity for the document browser page,
 * including document listing, filtering, editing, and collection management.
 */

/**
 * Initialize the document browser functionality
 */
function initDocumentBrowser() {
    // Get DOM elements with null checks
    const searchInput = document.getElementById('searchInput');
    const documentList = document.getElementById('documentList');
    const documentCount = document.getElementById('documentCount');
    const documentDetails = document.getElementById('documentDetails');
    const pagination = document.getElementById('pagination');
    const collectionFilter = document.getElementById('collectionFilter');
    const uploadCollection = document.getElementById('uploadCollection');
    const actionButtons = document.querySelector('.action-buttons');
    const newCollectionButton = document.getElementById('newCollectionButton');
    const manageCollectionsButton = document.getElementById('manageCollectionsButton');
    const editDocumentButton = document.getElementById('editDocumentButton');
    const deleteDocumentButton = document.getElementById('deleteDocumentButton');
    const refreshDocumentsBtn = document.getElementById('refreshDocumentsBtn');
    const toggleMultiSelectBtn = document.getElementById('toggleMultiSelectBtn');
    const multiSelectActions = document.getElementById('multiSelectActions');
    const selectedCount = document.getElementById('selectedCount');
    const batchMoveBtn = document.getElementById('batchMoveBtn');
    const batchDeleteBtn = document.getElementById('batchDeleteBtn');
    const confirmBatchDeleteButton = document.getElementById('confirmBatchDeleteButton');
    
    // Modals with null checks
    const editDocumentModal = document.getElementById('editDocumentModal') ? 
        new bootstrap.Modal(document.getElementById('editDocumentModal')) : null;
    const collectionModal = document.getElementById('collectionModal') ? 
        new bootstrap.Modal(document.getElementById('collectionModal')) : null;
    const manageCollectionsModal = document.getElementById('manageCollectionsModal') ?
        new bootstrap.Modal(document.getElementById('manageCollectionsModal')) : null;
    const deleteConfirmModal = document.getElementById('deleteConfirmModal') ?
        new bootstrap.Modal(document.getElementById('deleteConfirmModal')) : null;
    const batchDeleteModal = document.getElementById('batchDeleteModal') ?
        new bootstrap.Modal(document.getElementById('batchDeleteModal')) : null;
    const batchMoveModal = document.getElementById('batchMoveModal') ?
        new bootstrap.Modal(document.getElementById('batchMoveModal')) : null;
    
    // Modal elements
    const editDocumentId = document.getElementById('editDocumentId');
    const editDocumentTitle = document.getElementById('editTitle');
    const editDocumentAuthors = document.getElementById('editAuthors');
    const editDocumentJournal = document.getElementById('editJournal');
    const editDocumentPublicationDate = document.getElementById('editPublicationDate');
    const editDocumentDOI = document.getElementById('editDoi');
    const editDocumentTags = document.getElementById('editDocumentTags');
    const editDocumentCollection = document.getElementById('editDocumentCollection');
    const saveDocumentButton = document.getElementById('saveDocumentButton');
    const citationPreview = document.getElementById('citationPreview');
    
    const collectionId = document.getElementById('collectionId');
    const collectionName = document.getElementById('collectionName');
    const collectionDescription = document.getElementById('collectionDescription');
    const collectionParent = document.getElementById('collectionParent');
    const collectionModalTitle = document.getElementById('collectionModalTitle');
    const saveCollectionButton = document.getElementById('saveCollectionButton');
    const deleteCollectionButton = document.getElementById('deleteCollectionButton');
    
    const deleteConfirmMessage = document.getElementById('deleteConfirmMessage');
    const confirmDeleteButton = document.getElementById('confirmDeleteButton');
    
    const batchMoveCollection = document.getElementById('batchMoveCollection');
    const batchMoveSaveButton = document.getElementById('batchMoveSaveButton');
    
    // State
    let currentPage = 1;
    let totalPages = 1;
    let activeTag = null;
    let activeCollection = '';
    let searchTerm = '';
    let documents = [];
    let collections = [];
    let currentDocumentId = null;
    let deleteType = null; // 'document' or 'collection'
    let deleteId = null;
    let isMultiSelectMode = false;
    let selectedDocuments = new Set();
    
    // Initial load
    if (documentList) {
        loadDocuments();
    }
    if (collectionFilter) {
        loadCollections();
    }
    
    // Handle search input
    if (searchInput) {
        searchInput.addEventListener('input', debounce(function() {
            searchTerm = searchInput.value.trim();
            currentPage = 1;
            loadDocuments();
        }, 300));
    }
    
    // Handle collection filter change
    if (collectionFilter) {
        collectionFilter.addEventListener('change', function() {
            activeCollection = collectionFilter.value;
            currentPage = 1;
            loadDocuments();
        });
    }
    
    // Handle refresh button
    if (refreshDocumentsBtn) {
        refreshDocumentsBtn.addEventListener('click', function() {
            loadDocuments();
            loadCollections();
        });
    }
    
    // Handle multi-select toggle
    if (toggleMultiSelectBtn) {
        toggleMultiSelectBtn.addEventListener('click', function() {
            isMultiSelectMode = !isMultiSelectMode;
            toggleMultiSelectMode();
        });
    }
    
    // Handle batch move button
    if (batchMoveBtn) {
        batchMoveBtn.addEventListener('click', function() {
            if (selectedDocuments.size === 0) return;
            
            // Populate the batch move modal
            populateBatchMoveModal();
            if (batchMoveModal) {
                batchMoveModal.show();
            }
        });
    }
    
    // Handle batch delete button
    if (batchDeleteBtn) {
        batchDeleteBtn.addEventListener('click', function() {
            if (selectedDocuments.size === 0) return;
            
            // Set up batch delete modal
            if (document.getElementById("batchDeleteCount")) {
                document.getElementById("batchDeleteCount").textContent = selectedDocuments.size;
            }
            
            // Show batch delete modal
            if (batchDeleteModal) {
                batchDeleteModal.show();
            }
        });
    }
    
    // Handle confirm batch delete button
    if (confirmBatchDeleteButton) {
        confirmBatchDeleteButton.addEventListener('click', function() {
            batchDeleteDocuments();
            if (batchDeleteModal) {
                batchDeleteModal.hide();
            }
        });
    }
    
    // Handle batch move save
    if (batchMoveSaveButton && batchMoveCollection) {
        batchMoveSaveButton.addEventListener('click', function() {
            const collectionIdValue = batchMoveCollection.value;
            if (selectedDocuments.size === 0) return;
            
            const docIds = Array.from(selectedDocuments);
            
            // Send request to move documents
            fetch('/documents/api/documents/batch/move', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    document_ids: docIds,
                    collection_id: collectionIdValue === '' ? null : collectionIdValue
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Documents moved successfully', 'success');
                    if (batchMoveModal) {
                        batchMoveModal.hide();
                    }
                    
                    // Reset multi-select
                    isMultiSelectMode = false;
                    selectedDocuments.clear();
                    toggleMultiSelectMode();
                    
                    // Reload documents
                    loadDocuments();
                } else {
                    throw new Error(data.error || 'Failed to move documents');
                }
            })
            .catch(error => {
                showAlert('Error: ' + error.message, 'danger');
            });
        });
    }
    
    // Handle the new collection button
    if (newCollectionButton && collectionModal) {
        newCollectionButton.addEventListener('click', function() {
            // Clear the form for a new collection
            if (collectionId) collectionId.value = '';
            if (collectionName) collectionName.value = '';
            if (collectionDescription) collectionDescription.value = '';
            if (collectionParent) collectionParent.value = '';
            
            // Update modal title and buttons
            if (collectionModalTitle) {
                collectionModalTitle.textContent = 'Create New Collection';
            }
            if (deleteCollectionButton) {
                deleteCollectionButton.classList.add('d-none');
            }
            
            // Show the modal
            collectionModal.show();
        });
    }
    
    // Handle the manage collections button
    if (manageCollectionsButton && manageCollectionsModal) {
        manageCollectionsButton.addEventListener('click', function() {
            // Load collections data for the table
            loadCollectionsTable();
            
            // Show the modal
            manageCollectionsModal.show();
        });
    }
    
    // Handle collection form submission
    if (saveCollectionButton && collectionName) {
        saveCollectionButton.addEventListener('click', function() {
            const isEdit = collectionId && collectionId.value !== '';
            const url = isEdit 
                ? `/documents/api/collections/${collectionId.value}` 
                : '/documents/api/collections';
            const method = isEdit ? 'PUT' : 'POST';
            
            // Validate form
            if (!collectionName.value.trim()) {
                showAlert('Collection name is required', 'warning');
                return;
            }
            
            // Prepare data
            const data = {
                name: collectionName.value.trim(),
                description: collectionDescription ? collectionDescription.value.trim() : '',
                parent_id: collectionParent && collectionParent.value === '' ? null : (collectionParent ? collectionParent.value : null)
            };
            
            // Send request
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message
                    showAlert(`Collection ${isEdit ? 'updated' : 'created'} successfully`, 'success');
                    
                    // Close modal
                    if (collectionModal) {
                        collectionModal.hide();
                    }
                    
                    // Reload collections
                    loadCollections();
                } else {
                    throw new Error(data.error || `Failed to ${isEdit ? 'update' : 'create'} collection`);
                }
            })
            .catch(error => {
                showAlert('Error: ' + error.message, 'danger');
            });
        });
    }
    
    // Handle collection deletion
    if (deleteCollectionButton && collectionId) {
        deleteCollectionButton.addEventListener('click', function() {
            if (!collectionId.value) return;
            
            // Set up confirmation modal
            deleteType = 'collection';
            deleteId = collectionId.value;
            if (deleteConfirmMessage) {
                deleteConfirmMessage.textContent = 'Are you sure you want to delete this collection? Documents will be moved to the root level.';
            }
            
            // Hide collection modal and show confirmation modal
            if (collectionModal) {
                collectionModal.hide();
            }
            if (deleteConfirmModal) {
                deleteConfirmModal.show();
            }
        });
    }
    
    // Handle delete confirmation
    if (confirmDeleteButton) {
        confirmDeleteButton.addEventListener('click', function() {
            if (deleteType === 'document' && deleteId) {
                deleteDocument(deleteId);
            } else if (deleteType === 'collection' && deleteId) {
                deleteCollection(deleteId);
            } else if (deleteType === 'batch') {
                batchDeleteDocuments();
            }
            
            // Close modal
            if (deleteConfirmModal) {
                deleteConfirmModal.hide();
            }
        });
    }
    
    // Handle document editing
    if (editDocumentButton && editDocumentModal) {
        editDocumentButton.addEventListener('click', function() {
            if (!currentDocumentId) return;
            
            // Find current document
            const doc = documents.find(d => d.id === currentDocumentId);
            if (!doc) return;
            
            // Populate form
            if (editDocumentId) editDocumentId.value = doc.id;
            if (editDocumentTitle) editDocumentTitle.value = doc.title || '';
            if (editDocumentAuthors) editDocumentAuthors.value = doc.authors || '';
            if (editDocumentJournal) editDocumentJournal.value = doc.journal || '';
            if (editDocumentPublicationDate) editDocumentPublicationDate.value = doc.publication_date ? doc.publication_date.split('T')[0] : '';
            if (editDocumentDOI) editDocumentDOI.value = doc.doi || '';
            if (editDocumentTags) editDocumentTags.value = doc.tags ? doc.tags.join(', ') : '';
            if (editDocumentCollection) editDocumentCollection.value = doc.collection_id || '';
            
            // Update citation preview
            updateCitationPreview();
            
            // Show modal
            editDocumentModal.show();
        });
    }
    
    // Handle document view PDF (opens in new tab)
    document.addEventListener('click', function(e) {
        if (e.target.matches('.view-pdf-button') || e.target.closest('.view-pdf-button')) {
            const button = e.target.matches('.view-pdf-button') ? e.target : e.target.closest('.view-pdf-button');
            const documentId = button.dataset.id;
            if (documentId) {
                window.open(`/documents/view/${documentId}`, '_blank');
            }
        }
    });
    
    // Handle document form submission
    if (saveDocumentButton && editDocumentId && editDocumentTitle) {
        saveDocumentButton.addEventListener('click', function() {
            if (!editDocumentId.value) return;
            
            // Validate form
            if (!editDocumentTitle.value.trim()) {
                showAlert('Document title is required', 'warning');
                return;
            }
            
            // Prepare data
            const data = {
                title: editDocumentTitle.value.trim(),
                authors: editDocumentAuthors ? editDocumentAuthors.value.trim() : '',
                journal: editDocumentJournal ? editDocumentJournal.value.trim() : '',
                publication_date: editDocumentPublicationDate ? editDocumentPublicationDate.value || null : null,
                doi: editDocumentDOI ? editDocumentDOI.value.trim() : '',
                tags: editDocumentTags && editDocumentTags.value.trim() ? 
                     editDocumentTags.value.split(',').map(tag => tag.trim()) : [],
                collection_id: editDocumentCollection && editDocumentCollection.value !== '' ? 
                             editDocumentCollection.value : null
            };
            
            // Send request
            fetch(`/documents/api/documents/${editDocumentId.value}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message
                    showAlert('Document updated successfully', 'success');
                    
                    // Close modal
                    if (editDocumentModal) {
                        editDocumentModal.hide();
                    }
                    
                    // Reload document details
                    loadDocumentDetails(currentDocumentId);
                    
                    // Reload documents (in case title changed, etc.)
                    loadDocuments();
                } else {
                    throw new Error(data.error || 'Failed to update document');
                }
            })
            .catch(error => {
                showAlert('Error: ' + error.message, 'danger');
            });
        });
    }
    
    /**
     * Batch deletes selected documents
     */
    function batchDeleteDocuments() {
        if (selectedDocuments.size === 0) return;
        
        const docIds = Array.from(selectedDocuments);
        
        fetch('/documents/api/documents/batch/delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                document_ids: docIds
            })
        })
        .then(response => {
            // Always read the JSON, regardless of status code
            return response.json().then(data => {
                return { ok: response.ok, status: response.status, data };
            });
        })
        .then(result => {
            // Check if the operation was successful
            if (result.data.success) {
                showAlert(`${docIds.length} document(s) deleted successfully`, 'success');
                
                // Reset multi-select
                isMultiSelectMode = false;
                selectedDocuments.clear();
                toggleMultiSelectMode();
                
                // Reload documents
                loadDocuments();
                
                // Clear document details if current document was deleted
                if (docIds.includes(currentDocumentId)) {
                    currentDocumentId = null;
                    if (documentDetails) {
                        documentDetails.innerHTML = `
                            <div class="text-center p-5">
                                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text mb-3"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                                <p class="text-muted">Select a document to view details</p>
                            </div>
                        `;
                    }
                    
                    // Hide action buttons
                    if (actionButtons) {
                        actionButtons.classList.add('d-none');
                    }
                }
            } else {
                // Handle error from the server
                throw new Error(result.data.error || 'Failed to delete documents');
            }
        })
        .catch(error => {
            showAlert('Error: ' + error.message, 'danger');
        });
    }
    
    /**
     * Deletes a document by ID
     */
    function deleteDocument(documentId) {
        fetch(`/documents/api/documents/${documentId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showAlert('Document deleted successfully', 'success');
                
                // Clear document details
                currentDocumentId = null;
                if (documentDetails) {
                    documentDetails.innerHTML = `
                        <div class="text-center p-5">
                            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text mb-3"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                            <p class="text-muted">Select a document to view details</p>
                        </div>
                    `;
                }
                
                // Hide action buttons
                if (actionButtons) {
                    actionButtons.classList.add('d-none');
                }
                
                // Reload documents
                loadDocuments();
            } else {
                throw new Error(data.error || 'Failed to delete document');
            }
        })
        .catch(error => {
            showAlert('Error: ' + error.message, 'danger');
        });
    }
    
    /**
     * Deletes a collection by ID
     */
    function deleteCollection(collectionId) {
        fetch(`/documents/api/collections/${collectionId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showAlert('Collection deleted successfully', 'success');
                
                // Reload collections
                loadCollections();
                
                // If we're in the collections table view, reload that too
                if (document.getElementById('collectionsTableBody')) {
                    loadCollectionsTable();
                }
            } else {
                throw new Error(data.error || 'Failed to delete collection');
            }
        })
        .catch(error => {
            showAlert('Error: ' + error.message, 'danger');
        });
    }
    
    /**
     * Load and render documents with optional filters
     */
    function loadDocuments() {
        if (!documentList) return;
        
        // Show loading spinner
        documentList.innerHTML = `
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading documents...</p>
            </div>
        `;
        
        // Build query parameters
        const params = new URLSearchParams();
        params.append('page', currentPage);
        if (searchTerm) params.append('search', searchTerm);
        if (activeCollection !== '' && activeCollection !== 'all') {
            if (activeCollection === 'none') {
                params.append('collection', 'none');
            } else {
                params.append('collection', activeCollection);
            }
        }
        if (activeTag) params.append('tag', activeTag);
        
        // Fetch documents
        fetch(`/documents/api/documents?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || 'Failed to load documents');
                }
                
                documents = data.documents;
                totalPages = data.total_pages;
                currentPage = data.current_page;
                
                // Update document count
                if (documentCount) {
                    documentCount.textContent = data.total_documents;
                }
                
                // Check if we have any documents
                if (documents.length === 0) {
                    documentList.innerHTML = `
                        <div class="text-center p-5">
                            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text mb-3 text-muted"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                            <p class="text-muted">No documents found. Upload a PDF to get started.</p>
                        </div>
                    `;
                    
                    // Clear pagination
                    if (pagination) {
                        pagination.innerHTML = '';
                    }
                    
                    return;
                }
                
                // Render document list
                renderDocumentList();
                
                // Render pagination
                renderPagination();
            })
            .catch(error => {
                documentList.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i> Error: ${error.message}
                    </div>
                `;
            });
    }
    
    /**
     * Render the document list from the current documents array
     */
    function renderDocumentList() {
        if (!documentList || !documents) return;
        
        // Clear document list
        documentList.innerHTML = '';
        
        // Build document items
        documents.forEach(doc => {
            const docTitle = doc.title || 'Untitled Document';
            const docAuthors = doc.authors || 'Unknown Authors';
            const docJournal = doc.journal || '';
            const docDate = doc.publication_date ? new Date(doc.publication_date).toLocaleDateString() : 'No date';
            const docTags = doc.tags || [];
            
            // Create document item
            const item = document.createElement('div');
            item.className = 'list-group-item doc-item';
            item.dataset.id = doc.id;
            
            let itemHtml = '';
            
            // Add checkbox for multi-select mode
            if (isMultiSelectMode) {
                const isChecked = selectedDocuments.has(doc.id) ? 'checked' : '';
                itemHtml += `
                    <div class="form-check mb-2">
                        <input class="form-check-input doc-checkbox" type="checkbox" value="${doc.id}" ${isChecked}>
                    </div>
                `;
            }
            
            // Add document info
            itemHtml += `
                <div class="d-flex w-100 justify-content-between mb-1">
                    <h5 class="mb-1 doc-title">${escapeHtml(docTitle)}</h5>
                </div>
                <p class="mb-1 small">${escapeHtml(docAuthors)}</p>
            `;
            
            // Add journal and date if available
            if (docJournal || docDate) {
                itemHtml += `<p class="small text-muted mb-1">`;
                if (docJournal) itemHtml += `${escapeHtml(docJournal)}`;
                if (docJournal && docDate) itemHtml += ` &bull; `;
                if (docDate) itemHtml += `${docDate}`;
                itemHtml += `</p>`;
            }
            
            // Add tags if available
            if (docTags.length > 0) {
                itemHtml += `<div class="document-tags mb-1">`;
                docTags.slice(0, 3).forEach(tag => {
                    itemHtml += `<span class="badge bg-info me-1">${escapeHtml(tag)}</span>`;
                });
                if (docTags.length > 3) {
                    itemHtml += `<span class="badge bg-secondary">+${docTags.length - 3} more</span>`;
                }
                itemHtml += `</div>`;
            }
            
            // Add collection info if available
            if (doc.collection_name) {
                itemHtml += `
                    <small class="text-muted">
                        <i class="fas fa-folder me-1"></i> ${escapeHtml(doc.collection_name)}
                    </small>
                `;
            }
            
            item.innerHTML = itemHtml;
            
            // Add click handler for document selection
            if (!isMultiSelectMode) {
                item.addEventListener('click', function() {
                    // Clear any active items
                    document.querySelectorAll('.doc-item.active').forEach(el => {
                        el.classList.remove('active');
                    });
                    
                    // Highlight this item
                    item.classList.add('active');
                    
                    // Load document details
                    loadDocumentDetails(doc.id);
                });
            } else {
                // In multi-select mode, make sure checkbox is clickable
                const checkbox = item.querySelector('.doc-checkbox');
                if (checkbox) {
                    checkbox.addEventListener('change', function(e) {
                        e.stopPropagation();
                        if (this.checked) {
                            selectedDocuments.add(doc.id);
                        } else {
                            selectedDocuments.delete(doc.id);
                        }
                        updateMultiSelectUI();
                    });
                    
                    // Make the whole item toggle the checkbox
                    item.addEventListener('click', function(e) {
                        if (!e.target.classList.contains('doc-checkbox')) {
                            checkbox.checked = !checkbox.checked;
                            if (checkbox.checked) {
                                selectedDocuments.add(doc.id);
                            } else {
                                selectedDocuments.delete(doc.id);
                            }
                            updateMultiSelectUI();
                        }
                    });
                }
            }
            
            documentList.appendChild(item);
        });
    }
    
    /**
     * Load document details by ID and display in the details pane
     */
    function loadDocumentDetails(documentId) {
        if (!documentDetails) return;
        
        // Store current document ID
        currentDocumentId = documentId;
        
        // Show loading spinner
        documentDetails.innerHTML = `
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading document details...</p>
            </div>
        `;
        
        // Show action buttons
        if (actionButtons) {
            actionButtons.innerHTML = `
                <button id="editDocumentButton" class="btn btn-sm btn-outline-primary me-2">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button id="viewPdfButton" class="btn btn-sm btn-outline-secondary me-2 view-pdf-button" data-id="${documentId}">
                    <i class="fas fa-file-pdf"></i> View PDF
                </button>
                <button id="deleteDocumentButton" class="btn btn-sm btn-outline-danger">
                    <i class="fas fa-trash"></i> Delete
                </button>
            `;
            actionButtons.classList.remove('d-none');
        }
        
        // Fetch document details
        fetch(`/documents/api/documents/${documentId}`)
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || 'Failed to load document details');
                }
                
                const doc = data.document;
                
                // Format document metadata
                const docTitle = doc.title || 'Untitled Document';
                const docAuthors = doc.authors || 'Unknown Authors';
                const docJournal = doc.journal || 'No journal information';
                const docDate = doc.publication_date ? new Date(doc.publication_date).toLocaleDateString() : 'No date';
                const docDoi = doc.doi || 'No DOI';
                const docTags = doc.tags || [];
                const docCitation = doc.citation_apa || 'Citation not available';
                const docCollection = doc.collection_name || 'None';
                const docCollectionPath = doc.collection_path || '';
                
                // Build HTML for document details
                let detailsHtml = `
                    <div class="document-details-content">
                        <h4 class="mb-3">${escapeHtml(docTitle)}</h4>
                        
                        <div class="mb-4">
                            <div class="meta-item">
                                <div class="meta-label">Authors</div>
                                <div class="meta-value">${escapeHtml(docAuthors)}</div>
                            </div>
                            
                            <div class="meta-item">
                                <div class="meta-label">Journal/Publication</div>
                                <div class="meta-value">${escapeHtml(docJournal)}</div>
                            </div>
                            
                            <div class="meta-item">
                                <div class="meta-label">Publication Date</div>
                                <div class="meta-value">${docDate}</div>
                            </div>
                            
                            <div class="meta-item">
                                <div class="meta-label">DOI</div>
                                <div class="meta-value">
                                    ${doc.doi ? `<a href="https://doi.org/${doc.doi}" target="_blank">${escapeHtml(doc.doi)} <i class="fas fa-external-link-alt fa-sm"></i></a>` : 'Not available'}
                                </div>
                            </div>
                            
                            <div class="meta-item">
                                <div class="meta-label">Collection</div>
                                <div class="meta-value">
                                    ${docCollectionPath ? escapeHtml(docCollectionPath) : 'None'}
                                    <button class="btn btn-sm btn-outline-secondary ms-2" id="moveDocumentButton" data-id="${doc.id}">
                                        <i class="fas fa-folder-open"></i> Move
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5 class="mb-0">Tags</h5>
                                <button class="btn btn-sm btn-outline-primary" id="editTagsButton" data-id="${doc.id}">
                                    <i class="fas fa-tags"></i> Edit Tags
                                </button>
                            </div>
                            <div class="document-tags">
                `;
                
                if (docTags.length > 0) {
                    docTags.forEach(tag => {
                        detailsHtml += `<span class="badge bg-info me-1">${escapeHtml(tag)}</span>`;
                    });
                } else {
                    detailsHtml += `<p class="text-muted">No tags</p>`;
                }
                
                detailsHtml += `
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            <h5 class="mb-3">Citation</h5>
                            <div class="citation-box p-3 bg-light">
                                ${escapeHtml(docCitation)}
                            </div>
                            <button class="btn btn-sm btn-outline-secondary mt-2" onclick="navigator.clipboard.writeText('${docCitation.replace(/'/g, "\\'")}')">
                                <i class="fas fa-copy"></i> Copy Citation
                            </button>
                        </div>
                    </div>
                `;
                
                // Update the details pane
                documentDetails.innerHTML = detailsHtml;
                
                // Add event listeners for the move document button
                const moveDocumentButton = document.getElementById('moveDocumentButton');
                if (moveDocumentButton) {
                    moveDocumentButton.addEventListener('click', function() {
                        showMoveDocumentModal(doc.id);
                    });
                }
                
                // Add event listeners for the edit tags button
                const editTagsButton = document.getElementById('editTagsButton');
                if (editTagsButton) {
                    editTagsButton.addEventListener('click', function() {
                        showEditTagsModal(doc.id, docTags);
                    });
                }
                
                // Update the delete button
                const deleteDocumentButton = document.getElementById('deleteDocumentButton');
                if (deleteDocumentButton) {
                    deleteDocumentButton.addEventListener('click', function() {
                        confirmDeleteDocument(doc.id, docTitle);
                    });
                }
            })
            .catch(error => {
                documentDetails.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i> Error: ${error.message}
                    </div>
                `;
            });
    }
    
    /**
     * Show the move document modal
     */
    function showMoveDocumentModal(documentId) {
        // Set document ID in the form
        if (document.getElementById('moveDocumentId')) {
            document.getElementById('moveDocumentId').value = documentId;
        }
        
        // Populate collection dropdown
        if (document.getElementById('moveToCollectionSingle')) {
            populateCollectionDropdown('moveToCollectionSingle');
            
            // Find document in documents array
            const doc = documents.find(d => d.id === documentId);
            if (doc && doc.collection_id) {
                document.getElementById('moveToCollectionSingle').value = doc.collection_id;
            } else {
                document.getElementById('moveToCollectionSingle').value = '';
            }
        }
        
        // Show modal
        const moveDocumentModal = document.getElementById('moveDocumentModal') ?
            new bootstrap.Modal(document.getElementById('moveDocumentModal')) : null;
        if (moveDocumentModal) {
            moveDocumentModal.show();
        }
        
        // Add event listener for the confirm move button
        const confirmMoveButton = document.getElementById('confirmMoveButton');
        if (confirmMoveButton) {
            // Remove existing event listeners
            confirmMoveButton.replaceWith(confirmMoveButton.cloneNode(true));
            
            // Add new event listener
            document.getElementById('confirmMoveButton').addEventListener('click', function() {
                const collectionId = document.getElementById('moveToCollectionSingle').value;
                moveDocument(documentId, collectionId === '' ? null : collectionId);
            });
        }
    }
    
    /**
     * Move a document to a different collection
     */
    function moveDocument(documentId, collectionId) {
        fetch(`/documents/api/documents/${documentId}/collection`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                collection_id: collectionId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showAlert('Document moved successfully', 'success');
                
                // Close modal
                const moveDocumentModal = document.getElementById('moveDocumentModal') ?
                    bootstrap.Modal.getInstance(document.getElementById('moveDocumentModal')) : null;
                if (moveDocumentModal) {
                    moveDocumentModal.hide();
                }
                
                // Reload document details
                loadDocumentDetails(documentId);
                
                // Reload documents if filtering by collection
                if (activeCollection !== '') {
                    loadDocuments();
                }
            } else {
                throw new Error(data.error || 'Failed to move document');
            }
        })
        .catch(error => {
            showAlert('Error: ' + error.message, 'danger');
        });
    }
    
    /**
     * Show the edit tags modal
     */
    function showEditTagsModal(documentId, currentTags) {
        // Set document ID in the form
        if (document.getElementById('editTagsDocumentId')) {
            document.getElementById('editTagsDocumentId').value = documentId;
        }
        
        // Populate tags input
        const tagsSelect = document.getElementById('editTagsSelect');
        if (tagsSelect) {
            // Clear existing options
            tagsSelect.innerHTML = '';
            
            // Add current tags
            if (currentTags && currentTags.length > 0) {
                currentTags.forEach(tag => {
                    const option = document.createElement('option');
                    option.value = tag;
                    option.textContent = tag;
                    option.selected = true;
                    tagsSelect.appendChild(option);
                });
            }
            
            // Initialize Select2 if available
            if (typeof $.fn.select2 !== 'undefined') {
                $(tagsSelect).select2({
                    tags: true,
                    tokenSeparators: [',', ' '],
                    placeholder: 'Add or select tags',
                    allowClear: true
                });
                
                // Load all tags for autocomplete
                loadAllTags();
            }
        }
        
        // Show modal
        const editTagsModal = document.getElementById('editTagsModal') ?
            new bootstrap.Modal(document.getElementById('editTagsModal')) : null;
        if (editTagsModal) {
            editTagsModal.show();
        }
        
        // Add event listener for the save button
        const saveTagsButton = document.getElementById('saveTagsButton');
        if (saveTagsButton) {
            // Remove existing event listeners
            saveTagsButton.replaceWith(saveTagsButton.cloneNode(true));
            
            // Add new event listener
            document.getElementById('saveTagsButton').addEventListener('click', function() {
                const newTags = [];
                if (typeof $.fn.select2 !== 'undefined') {
                    // Get tags from Select2
                    $(tagsSelect).find(':selected').each(function() {
                        newTags.push($(this).val());
                    });
                } else {
                    // Fallback for options
                    Array.from(tagsSelect.selectedOptions).forEach(opt => {
                        newTags.push(opt.value);
                    });
                }
                
                updateDocumentTags(documentId, newTags);
            });
        }
    }
    
    /**
     * Load all tags for autocomplete
     */
    function loadAllTags() {
        fetch('/documents/api/tags')
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || 'Failed to load tags');
                }
                
                const tagsSelect = document.getElementById('editTagsSelect');
                if (tagsSelect && typeof $.fn.select2 !== 'undefined') {
                    // Get currently selected tags
                    const selectedTags = [];
                    $(tagsSelect).find(':selected').each(function() {
                        selectedTags.push($(this).val());
                    });
                    
                    // Clear select
                    $(tagsSelect).empty();
                    
                    // Add all tags
                    data.tags.forEach(tag => {
                        const option = document.createElement('option');
                        option.value = tag;
                        option.textContent = tag;
                        option.selected = selectedTags.includes(tag);
                        tagsSelect.appendChild(option);
                    });
                    
                    // Refresh Select2
                    $(tagsSelect).trigger('change');
                }
            })
            .catch(error => {
                console.error('Error loading tags:', error);
            });
    }
    
    /**
     * Update a document's tags
     */
    function updateDocumentTags(documentId, tags) {
        fetch(`/documents/api/documents/${documentId}/tags`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ tags })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                showAlert('Tags updated successfully', 'success');
                
                // Close modal
                const editTagsModal = document.getElementById('editTagsModal') ?
                    bootstrap.Modal.getInstance(document.getElementById('editTagsModal')) : null;
                if (editTagsModal) {
                    editTagsModal.hide();
                }
                
                // Reload document details
                loadDocumentDetails(documentId);
                
                // Reload documents if filtering by tag
                if (activeTag) {
                    loadDocuments();
                }
            } else {
                throw new Error(data.error || 'Failed to update tags');
            }
        })
        .catch(error => {
            showAlert('Error: ' + error.message, 'danger');
        });
    }
    
    /**
     * Confirm document deletion
     */
    function confirmDeleteDocument(documentId, documentTitle) {
        // Set up confirmation modal
        deleteType = 'document';
        deleteId = documentId;
        if (deleteConfirmMessage) {
            deleteConfirmMessage.textContent = `Are you sure you want to delete "${documentTitle}"? This action cannot be undone.`;
        }
        
        // Show confirmation modal
        if (deleteConfirmModal) {
            deleteConfirmModal.show();
        }
    }
    
    /**
     * Load and populate the collections dropdown
     */
    function loadCollections() {
        // Fetch collections
        fetch('/documents/api/collections')
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || 'Failed to load collections');
                }
                
                collections = data.collections;
                
                // Populate collection dropdowns
                populateCollectionDropdowns();
            })
            .catch(error => {
                console.error('Error loading collections:', error);
                showAlert('Error: ' + error.message, 'danger');
            });
    }
    
    /**
     * Populate all collection dropdowns
     */
    function populateCollectionDropdowns() {
        // Collection filter
        populateCollectionDropdown('collectionFilter', true);
        
        // Upload collection
        populateCollectionDropdown('uploadCollection');
        
        // Edit document collection
        populateCollectionDropdown('editDocumentCollection');
        
        // Collection parent for new/edit collection
        populateCollectionDropdown('collectionParent');
    }
    
    /**
     * Populate a specific collection dropdown
     */
    function populateCollectionDropdown(dropdownId, includeAll = false) {
        const dropdown = document.getElementById(dropdownId);
        if (!dropdown) return;
        
        // Store current value
        const currentValue = dropdown.value;
        
        // Clear dropdown
        dropdown.innerHTML = '';
        
        // Add "All" option for filter
        if (includeAll) {
            const allOption = document.createElement('option');
            allOption.value = 'all';
            allOption.textContent = 'All Collections';
            dropdown.appendChild(allOption);
            
            const noneOption = document.createElement('option');
            noneOption.value = 'none';
            noneOption.textContent = 'No Collection';
            dropdown.appendChild(noneOption);
        } else {
            // Add empty option for non-filter dropdowns
            const emptyOption = document.createElement('option');
            emptyOption.value = '';
            emptyOption.textContent = 'None';
            dropdown.appendChild(emptyOption);
        }
        
        // Add collection options, grouped by hierarchy
        function addCollectionOptions(items, level = 0, path = '') {
            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.id;
                
                // Create indented name for visual hierarchy
                const indentation = '  '.repeat(level);
                const prefix = level > 0 ? indentation + '└─ ' : '';
                
                option.textContent = prefix + item.name;
                option.dataset.path = path ? `${path} / ${item.name}` : item.name;
                
                // Set optgroup for visual grouping if supported
                if (level > 0) {
                    option.classList.add('collection-child');
                }
                
                dropdown.appendChild(option);
                
                // Recursively add children
                if (item.children && item.children.length > 0) {
                    addCollectionOptions(
                        item.children, 
                        level + 1,
                        path ? `${path} / ${item.name}` : item.name
                    );
                }
            });
        }
        
        // Add collection options
        if (collections && collections.length > 0) {
            addCollectionOptions(collections);
        }
        
        // Restore selected value if it exists
        if (currentValue) {
            dropdown.value = currentValue;
        }
    }
    
    /**
     * Populate the batch move modal
     */
    function populateBatchMoveModal() {
        // Update count
        const batchMoveCount = document.getElementById('batchMoveCount');
        if (batchMoveCount) {
            batchMoveCount.innerHTML = `<span class="badge bg-primary">${selectedDocuments.size}</span> documents selected`;
        }
        
        // Populate collection dropdown
        if (document.getElementById('batchMoveCollection')) {
            populateCollectionDropdown('batchMoveCollection');
        }
        
        // Update confirm button
        const confirmBatchMoveButton = document.getElementById('confirmBatchMoveButton');
        if (confirmBatchMoveButton) {
            // Remove existing event listeners
            confirmBatchMoveButton.replaceWith(confirmBatchMoveButton.cloneNode(true));
            
            // Add new event listener
            document.getElementById('confirmBatchMoveButton').addEventListener('click', function() {
                const collectionId = document.getElementById('batchMoveCollection').value;
                batchMoveDocuments(collectionId === '' ? null : collectionId);
            });
        }
    }
    
    /**
     * Move multiple documents to a collection
     */
    function batchMoveDocuments(collectionId) {
        if (selectedDocuments.size === 0) return;
        
        const docIds = Array.from(selectedDocuments);
        
        fetch('/documents/api/documents/batch/move', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                document_ids: docIds,
                collection_id: collectionId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('Documents moved successfully', 'success');
                
                // Close modal
                const batchMoveModal = document.getElementById('batchMoveModal') ?
                    bootstrap.Modal.getInstance(document.getElementById('batchMoveModal')) : null;
                if (batchMoveModal) {
                    batchMoveModal.hide();
                }
                
                // Reset multi-select
                isMultiSelectMode = false;
                selectedDocuments.clear();
                toggleMultiSelectMode();
                
                // Reload documents
                loadDocuments();
            } else {
                throw new Error(data.error || 'Failed to move documents');
            }
        })
        .catch(error => {
            showAlert('Error: ' + error.message, 'danger');
        });
    }
    
    /**
     * Load and render the collections table for the manage collections modal
     */
    function loadCollectionsTable() {
        const tableBody = document.getElementById('collectionsTableBody');
        if (!tableBody) return;
        
        // Show loading state
        tableBody.innerHTML = `
            <tr>
                <td colspan="4" class="text-center">
                    <div class="spinner-border spinner-border-sm text-secondary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading collections...</span>
                </td>
            </tr>
        `;
        
        // Fetch collections with documents count
        fetch('/documents/api/collections?include_counts=true')
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || 'Failed to load collections');
                }
                
                // Clear table
                tableBody.innerHTML = '';
                
                // Handle empty state
                if (data.collections.length === 0) {
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="4" class="text-center py-4">
                                <i class="fas fa-folder-open fa-2x mb-2 text-muted"></i>
                                <p>No collections found. Create a collection to organize your documents.</p>
                            </td>
                        </tr>
                    `;
                    return;
                }
                
                // Render collections in flat list
                function renderCollections(items, level = 0, path = '') {
                    items.forEach(item => {
                        const row = document.createElement('tr');
                        
                        // Name cell with indentation
                        const nameCell = document.createElement('td');
                        const indentation = '  '.repeat(level);
                        const prefix = level > 0 ? indentation + '└─ ' : '';
                        
                        // For visual hierarchy in the table
                        nameCell.innerHTML = `
                            <div class="d-flex align-items-center">
                                <i class="fas fa-folder me-2 text-warning"></i>
                                <span>${prefix}${escapeHtml(item.name)}</span>
                            </div>
                        `;
                        row.appendChild(nameCell);
                        
                        // Path cell
                        const pathCell = document.createElement('td');
                        pathCell.classList.add('text-muted');
                        pathCell.textContent = path ? path : 'Root';
                        row.appendChild(pathCell);
                        
                        // Document count cell
                        const countCell = document.createElement('td');
                        countCell.textContent = item.document_count || 0;
                        row.appendChild(countCell);
                        
                        // Actions cell
                        const actionsCell = document.createElement('td');
                        actionsCell.innerHTML = `
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary edit-collection-btn" data-id="${item.id}">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-outline-danger delete-collection-btn" data-id="${item.id}">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        `;
                        row.appendChild(actionsCell);
                        
                        tableBody.appendChild(row);
                        
                        // Add event listeners for edit and delete buttons
                        const editBtn = actionsCell.querySelector('.edit-collection-btn');
                        if (editBtn) {
                            editBtn.addEventListener('click', function() {
                                editCollection(item.id);
                            });
                        }
                        
                        const deleteBtn = actionsCell.querySelector('.delete-collection-btn');
                        if (deleteBtn) {
                            deleteBtn.addEventListener('click', function() {
                                confirmDeleteCollection(item.id, item.name);
                            });
                        }
                        
                        // Recursively render children
                        if (item.children && item.children.length > 0) {
                            renderCollections(
                                item.children, 
                                level + 1,
                                path ? `${path} / ${item.name}` : item.name
                            );
                        }
                    });
                }
                
                renderCollections(data.collections);
            })
            .catch(error => {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="4" class="text-center">
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-circle me-2"></i> Error: ${error.message}
                            </div>
                        </td>
                    </tr>
                `;
            });
    }
    
    /**
     * Edit a collection in the modal
     */
    function editCollection(collectionId) {
        // Find collection in the collections array
        function findCollection(collections, id) {
            for (const collection of collections) {
                if (collection.id === id) {
                    return collection;
                }
                if (collection.children && collection.children.length > 0) {
                    const found = findCollection(collection.children, id);
                    if (found) return found;
                }
            }
            return null;
        }
        
        const collection = findCollection(collections, collectionId);
        if (!collection) {
            showAlert('Collection not found', 'danger');
            return;
        }
        
        // Populate form
        if (collectionId) collectionId.value = collection.id;
        if (collectionName) collectionName.value = collection.name;
        if (collectionDescription) collectionDescription.value = collection.description || '';
        if (collectionParent) {
            // Make sure we don't allow a collection to be its own parent
            // or a descendant to be a parent (would create a loop)
            populateCollectionDropdown('collectionParent');
            
            // Remove the collection itself and all its children from the options
            function removeCollectionAndDescendants(id) {
                const option = collectionParent.querySelector(`option[value="${id}"]`);
                if (option) option.remove();
                
                // Find children and remove them too
                function findAndRemoveChildren(collections, parentId) {
                    for (const coll of collections) {
                        if (coll.parent_id === parentId) {
                            const childOption = collectionParent.querySelector(`option[value="${coll.id}"]`);
                            if (childOption) childOption.remove();
                            findAndRemoveChildren(collections, coll.id);
                        }
                    }
                }
                
                // Flatten collections for easier searching
                function flattenCollections(collections) {
                    let result = [];
                    for (const coll of collections) {
                        result.push(coll);
                        if (coll.children && coll.children.length > 0) {
                            result = result.concat(flattenCollections(coll.children));
                        }
                    }
                    return result;
                }
                
                const flatCollections = flattenCollections(collections);
                findAndRemoveChildren(flatCollections, id);
            }
            
            removeCollectionAndDescendants(collectionId);
            
            // Set parent value
            collectionParent.value = collection.parent_id || '';
        }
        
        // Update modal title and buttons
        if (collectionModalTitle) {
            collectionModalTitle.textContent = 'Edit Collection';
        }
        if (deleteCollectionButton) {
            deleteCollectionButton.classList.remove('d-none');
        }
        
        // Show the modal
        if (collectionModal) {
            collectionModal.show();
        }
    }
    
    /**
     * Confirm collection deletion
     */
    function confirmDeleteCollection(collectionId, collectionName) {
        // Set up confirmation modal
        deleteType = 'collection';
        deleteId = collectionId;
        if (deleteConfirmMessage) {
            deleteConfirmMessage.textContent = `Are you sure you want to delete the collection "${collectionName}"? Documents will be moved to the root level.`;
        }
        
        // Show confirmation modal
        if (deleteConfirmModal) {
            deleteConfirmModal.show();
        }
    }
    
    /**
     * Handle multi-select mode toggling
     */
    function toggleMultiSelectMode() {
        // Update UI based on multi-select mode
        if (isMultiSelectMode) {
            toggleMultiSelectBtn.classList.add('active');
            toggleMultiSelectBtn.innerHTML = '<i class="fas fa-times"></i> Cancel Selection';
            
            // Show multi-select actions
            if (multiSelectActions) {
                multiSelectActions.classList.remove('d-none');
            }
            
            // Clear current document details
            if (documentDetails) {
                documentDetails.innerHTML = `
                    <div class="text-center p-5">
                        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-check-square mb-3"><polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path></svg>
                        <p class="text-muted">Multi-select mode active. Select documents from the list.</p>
                    </div>
                `;
            }
            
            // Hide action buttons
            if (actionButtons) {
                actionButtons.classList.add('d-none');
            }
        } else {
            toggleMultiSelectBtn.classList.remove('active');
            toggleMultiSelectBtn.innerHTML = '<i class="fas fa-check-square"></i> Select Multiple';
            
            // Hide multi-select actions
            if (multiSelectActions) {
                multiSelectActions.classList.add('d-none');
            }
            
            // Clear selected documents
            selectedDocuments.clear();
            
            // Reset document details view
            if (documentDetails) {
                documentDetails.innerHTML = `
                    <div class="text-center p-5">
                        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file-text mb-3"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                        <p class="text-muted">Select a document to view details</p>
                    </div>
                `;
            }
        }
        
        // Re-render document list
        renderDocumentList();
    }
    
    /**
     * Update multi-select UI based on selected documents
     */
    function updateMultiSelectUI() {
        // Update selected count
        if (selectedCount) {
            selectedCount.textContent = selectedDocuments.size;
        }
        
        // Enable/disable batch action buttons
        if (batchMoveBtn) {
            batchMoveBtn.disabled = selectedDocuments.size === 0;
        }
        if (batchDeleteBtn) {
            batchDeleteBtn.disabled = selectedDocuments.size === 0;
        }
    }
    
    /**
     * Render pagination controls
     */
    function renderPagination() {
        if (!pagination) return;
        
        // Clear pagination
        pagination.innerHTML = '';
        
        // Don't show pagination if we only have one page
        if (totalPages <= 1) return;
        
        // Create pagination list
        const ul = document.createElement('ul');
        ul.className = 'pagination pagination-sm justify-content-center';
        
        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = 'page-item' + (currentPage === 1 ? ' disabled' : '');
        prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a>`;
        prevLi.addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage > 1) {
                currentPage--;
                loadDocuments();
            }
        });
        ul.appendChild(prevLi);
        
        // Determine which page numbers to show
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, startPage + 4);
        
        // Adjust startPage if endPage is maxed out
        if (endPage === totalPages) {
            startPage = Math.max(1, endPage - 4);
        }
        
        // Page number buttons
        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement('li');
            li.className = 'page-item' + (i === currentPage ? ' active' : '');
            li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
            li.addEventListener('click', function(e) {
                e.preventDefault();
                currentPage = i;
                loadDocuments();
            });
            ul.appendChild(li);
        }
        
        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = 'page-item' + (currentPage === totalPages ? ' disabled' : '');
        nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next"><span aria-hidden="true">&raquo;</span></a>`;
        nextLi.addEventListener('click', function(e) {
            e.preventDefault();
            if (currentPage < totalPages) {
                currentPage++;
                loadDocuments();
            }
        });
        ul.appendChild(nextLi);
        
        // Add pagination to the page
        pagination.appendChild(ul);
    }
    
    /**
     * Update citation preview when editing document
     */
    function updateCitationPreview() {
        if (!citationPreview || !editDocumentTitle || !editDocumentAuthors || !editDocumentJournal || !editDocumentPublicationDate) return;
        
        // Get values from form
        const title = editDocumentTitle.value.trim();
        const authors = editDocumentAuthors.value.trim();
        const journal = editDocumentJournal.value.trim();
        const date = editDocumentPublicationDate.value;
        
        // Only generate preview if we have basic info
        if (!title || !authors) {
            citationPreview.textContent = 'Citation will be generated automatically after saving';
            return;
        }
        
        // Simple APA-style citation preview
        let citation = '';
        
        // Authors (Last name, First initial.)
        if (authors) {
            const authorNames = authors.split(',').map(author => author.trim());
            citation += authorNames.map(author => {
                const parts = author.split(' ');
                if (parts.length > 1) {
                    const lastName = parts.pop();
                    const initials = parts.map(name => name.charAt(0) + '.').join(' ');
                    return `${lastName}, ${initials}`;
                } else {
                    return author;
                }
            }).join(', ');
            
            citation += '. ';
        }
        
        // Year
        if (date) {
            const year = new Date(date).getFullYear();
            citation += `(${year}). `;
        }
        
        // Title (italicized)
        citation += `<em>${title}</em>. `;
        
        // Journal and other info
        if (journal) {
            citation += `${journal}`;
            
            // Add volume/issue placeholders if this is a journal
            citation += ' XX(X), XX-XX.';
        }
        
        citationPreview.innerHTML = citation;
    }
    
    /**
     * Show an alert message
     */
    function showAlert(message, type = 'info') {
        const alertPlaceholder = document.getElementById('alertPlaceholder');
        if (!alertPlaceholder) return;
        
        // Create alert
        const wrapper = document.createElement('div');
        wrapper.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
        // Add alert to placeholder
        alertPlaceholder.appendChild(wrapper);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            const alert = wrapper.querySelector('.alert');
            if (alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }
        }, 5000);
    }
    
    /**
     * Utility function to debounce function calls
     */
    function debounce(func, wait) {
        let timeout;
        return function() {
            const context = this;
            const args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(context, args);
            }, wait);
        };
    }
    
    /**
     * Utility function to escape HTML special characters
     */
    function escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}